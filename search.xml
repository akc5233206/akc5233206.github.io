<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Build OpenCV 3.4.5 From Source for Anaconda on Ubuntu 16.04 With Cuda]]></title>
    <url>%2F2019%2F03%2F18%2FBuild-OpenCV-3.4.5-from-source-for-Anaconda-on-Ubuntu-16.04-with-CUDA%2F</url>
    <content type="text"><![CDATA[Sometimes you may need some special packages in openCV that are not included in the pre-built version. You may also need this opencv to be linked to the anaconda/miniconda virtual environment that you already created. This one is tricky as the configuration is pretty complex, especially for people like me not used to C++. I have read a lot of online blogs and could not find out one that works perfectly for my situation. Therefore, I logged down my experience, hoping to save you from investing time preparing the environment. Install Cuda and test installationPlease refer to Nvidia’s detailed Cuda installation guide. Please notice that this link refers to Cuda 10 and you should choose the version applicable. Sometimes OpenCV is not yet compatible to the latest Cuda. Therefore, I recommend installing a previous version Cuda, like 9.0. In this post, I chose Cuda 9.0 to comply with Tensorflow 1.12 and OpenCV 3.4.5 I am going to install later. Install dependenciesReference: https://www.pytorials.com/how-to-install-opencv340-on-ubuntu1604/ 123456789sudo apt-get updatesudo apt-get install build-essentialsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-devsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-devsudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-devsudo apt-get install libxvidcore-dev libx264-devsudo apt-get install libgtk-3-devsudo apt-get install libatlas-base-dev gfortran pylintsudo apt-get install python2.7-dev python3.5-dev Notice: You need to install python3-numpy in order to let OpenCV build for Python 3, which is missed in the article I referenced. 1sudo apt-get install python3-numpy Besides, you may install ccmake for a friendly UI in later compilation 1sudo apt-get install cmake-curses-gui if GCC, G++ is missed in your computer, you may install them as well 1sudo apt-get install gcc g++ Download OpenCV 3.4.51234wget https://github.com/opencv/opencv/archive/3.4.5.zip -O opencv-3.4.5.zipwget https://github.com/opencv/opencv_contrib/archive/3.4.5.zip -O opencv_contrib-3.4.5.zipunzip opencv-3.4.5.zipunzip opencv_contrib-3.4.5.zip Configure OpenCV installationNotice: OPENCV_EXTRA_MODULES_PATH should be changed to adapt to your computer. 1234cd opencv-3.4.5mkdir buildcd buildcmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DOPENCV_EXTRA_MODULES_PATH=/home/cvpl/cvproj/opencv_contrib-3.4.5/modules -DPYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3.5 .. You may execute ccmake .. for a GUI configuration experience1ccmake .. Compile and installFirst, check how many cores you have in your computer. If there are 8, run -j8.12cat /proc/cpuinfo | grep processor | wc -lmake -j8 If you face the following issue, probably it is due to the incompatibility of Cuda and OpenCV. Cuda 10 was released after OpenCV 3.4.5, so try to install Cuda 9.0 to your computer instead. 12Makefile:160: recipe for target &apos;all&apos; failedIssue page: https://github.com/opencv/opencv/issues/7652 After long waiting and no errors occur, start installation. 1sudo make install Install anaconda/miniconda and create a virtual environment Here I used miniconda as an example. Download and install miniconda 12wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.shsh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh Then, we need to edit the system variable in order to use conda command. Without doing this, you need to specify bin path each time you open a new command to use conda. 123gedit ~/.bashrc # Add at the last lineexport PATH=/home/cvpl/miniconda3/bin:$PATH Create a virtual environment and install numpy 123conda create --name cvpy3 python=3.5source acitvate cvpy3conda install numpy Link openCV binding to miniconda virtual environmentRight now you are one last step before using “import cv2”. Just find a .so file and copy it to your virtual environment library. You may spend some time looking for it. Normally it is under usr/local/lib/pythonXX/site-packages/cv2/python-3.x. Rename it as cv2.co and copy it to the target directory. 12cd /usr/local/lib/python2.7/dist-packages/cv2/python-2.7sudo cp cv2.so /home/cvpl/miniconda3/envs/cvpy2/lib/python2.7/site-packages/cv2.so You may create a python 2 environment and do so for python 2. 12345conda create --name cvpy2 python=2.7source acitvate cvpy2cd /usr/local/lib/python2.7/site-packages/cv2/python-2.7sudo cp cv2.cpython-35m-x86_64-linux-gnu.so cv2.sosudo mv cv2.so /home/cvpl/miniconda3/envs/cvpy3/lib/python3.5/site-packages/cv2.so Test the installationTry starting a python session and import cv2. If no error occurs, then congratulations ;) 12pythonimport cv2 References:Here are the posts I checked out to walk through this process. https://www.pytorials.com/how-to-install-opencv340-on-ubuntu1604/ https://github.com/opencv/opencv/issues/8425 https://stackoverflow.com/questions/37070304/how-to-build-opencv-for-python3-when-both-python2-and-python3-are-installed https://stackoverflow.com/questions/42745993/compiling-opencv-how-to-build-the-cv2-so-module-for-python3-6 https://www.tutorialspoint.com/unix_commands/make.htm http://answers.opencv.org/question/173105/successfully-built-opencv-330-but-no-cv2so-found/]]></content>
      <categories>
        <category>Computer-Vision</category>
      </categories>
      <tags>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Setup Phpmyadmin on MacOS]]></title>
    <url>%2F2018%2F11%2F11%2FHow-to-Setup-phpmyadmin-on-MacOS%2F</url>
    <content type="text"><![CDATA[Since I am using Mac and I am desperately in need to test PHP, I researched on how to use phpmyadmin on MacOS. It seems Mac has apache built-in so there is no need to install another one. Here I summarize the steps I took to make it work: Start the built in apacheRun the following command1sudo apachectl start Browse to localhost, then if “It works” is printed, the apache is started properly. Enable phpModify httpd.conf1sudo vi /etc/apache2/httpd.conf Find and uncomment this line (Remove #)1LoadModule php7_module libexec/apache2/libphp7.so Restart apache1sudo apachectl restart Configure the home directoryThe message “It works” comes from the /Library/WebServer/Documents/info.phpNow we want to change the directory to User/Sites.Create a folder named “Sites” under your User folder. Then, run command1sudo vi /etc/apache2/httpd.conf Change both occurances of “/Library/WebServer/Documents/“ from12DocumentRoot &quot;/Library/WebServer/Documents/&quot;&lt;Directory &quot;/Library/WebServer/Documents/&quot;&gt; to12DocumentRoot &quot;/Users/Carlos/Sites&quot;&lt;Directory &quot;/Users/Carlos/Sites&quot;&gt; Again, don’t forget to restart apache 1sudo apachectl restart Check apacheNow we add a php file named index.php to the Sites folder we created. 1234&lt;?phpecho "Success!";phpinfo();?&gt; Then, naviagate browser to localhost and You can see the word “Success!” Setup phpmyadmin Download the software from official website. https://www.phpmyadmin.net/downloads/ Unzip the installation file inside the “Sites” folder. Don’t forget to rename the folder name so that it is easier to access via browser. I choose the name “phpmyadmin”. Create a setup fileNavigate browser to http://localhost/phpmyadmin/setup. Click on “New server”. Type in the hostname, password, username of the mysql server. After applying the settings, click download. Place the downloaded file into phpmyadmin folder. NOTICE: If you are using local mysql server, input the host name as 127.0.0.1 Login to phpmyadminNavigate to localhost/phpmyadmin. Now you can login with the username and password. References: https://jason.pureconcepts.net/2014/11/configure-apache-virtualhost-mac-os-x/ https://www.youtube.com/watch?v=YzlFqNXJgfM]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
</search>
